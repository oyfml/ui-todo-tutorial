{"version":3,"sources":["context/todo.actions.js","context/todo.reducer.js","context/TodoContextProvider.jsx","components/Header.jsx","config/appConfig.js","config/firebaseConfig.js","services/firebaseApi.js","components/TodoInput.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["setTodos","todos","type","data","todoReducer","state","action","id","description","todosAfterDelete","updatedTodos","initialState","TodoContext","createContext","TodoContextProvider","children","useReducer","dispatch","Provider","value","Header","data-cy","require","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fireStore","firestore","firebaseApi","fetchTodos","a","collection","get","docs","forEach","item","addTodo","doc","set","updateTodo","update","deleteTodo","delete","TodoInput","useState","inputValue","setInputValue","useContext","className","onChange","target","placeholder","size","shape","onClick","uuidv4","TodoTask","props","updatedValue","setUpdatedValue","isUpdating","setUpdating","TodoList","useEffect","handleDeleteTodo","handleUpdateTodo","Object","entries","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db12e649.chunk.js","sourcesContent":["export const SET_TODOS = \"SET_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\n\r\nexport const setTodos = (todos) => ({ type: SET_TODOS, data: todos });\r\nexport const addTodo = (id, description) => ({\r\n  type: ADD_TODO,\r\n  data: { id, description },\r\n});\r\nexport const deleteTodo = (id) => ({ type: DELETE_TODO, data: id });\r\nexport const updateTodo = (id, description) => ({\r\n  type: UPDATE_TODO,\r\n  data: { id, description },\r\n});","import { SET_TODOS, ADD_TODO, DELETE_TODO, UPDATE_TODO } from \"./todo.actions\";\r\n\r\nexport const todoReducer = (state, action) => {\r\n  const { type, data } = action;\r\n  switch (type) {\r\n    case SET_TODOS:\r\n      return { ...state, todos: data };\r\n    case ADD_TODO:\r\n      const todos = {\r\n        ...state.todos,\r\n        [data.id]: { description: data.description },\r\n      };\r\n      return { ...state, todos };\r\n    case DELETE_TODO:\r\n      const todosAfterDelete = { ...state.todos };\r\n      delete todosAfterDelete[data];\r\n      return { ...state, todos: todosAfterDelete };\r\n    case UPDATE_TODO:\r\n      const updatedTodos = { ...state.todos };\r\n      updatedTodos[data.id].description = data.description;\r\n      return { ...state, todos: updatedTodos };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { todoReducer } from \"./todo.reducer\";\r\n\r\nconst initialState = { todos: {} };\r\nexport const TodoContext = createContext(initialState);\r\n\r\nexport const TodoContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(todoReducer, initialState);\r\n  return (\r\n    <TodoContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Header = () => <h1 data-cy=\"header\">TODO</h1>;\r\n","require(\"dotenv\").config();\r\n\r\nexport const config = {\r\n\tfirebase: {\r\n\t\tapiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n\t\tauthDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n\t\tdatabaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n\t\tprojectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n\t\tstorageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n\t\tmessagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n\t\tappId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n\t}\r\n};\r\n","import firebase from \"firebase/app\";\r\n// Required for side-effects\r\nimport \"firebase/firestore\";\r\nimport { config } from \"./appConfig\";\r\n\r\nfirebase.initializeApp(config.firebase);\r\n\r\nexport const fireStore = firebase.firestore();","import { fireStore } from \"../config/firebaseConfig\";\r\n\r\nconst COLLECTION_NAME = \"todo-list\";\r\n\r\nconst fetchTodos = async () => {\r\n\tconst todos = {};\r\n\t(await fireStore.collection(COLLECTION_NAME).get()).docs.forEach((item) => {\r\n\t\ttodos[item.id] = item.data();\r\n\t});\r\n\treturn todos;\r\n}\r\n\r\nconst addTodo = async (id, description) => {\r\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).set({ description });\r\n}\r\n\r\nconst updateTodo = async (id, description) => {\r\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).update({ description });\r\n}\r\n\r\nconst deleteTodo = async (id) => {\r\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).delete();\r\n}\r\n\r\nexport const firebaseApi = {\r\n\tfetchTodos,\r\n\taddTodo,\r\n\tupdateTodo,\r\n\tdeleteTodo,\r\n}","import { Button, Input } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addTodo } from \"../context/todo.actions\";\r\nimport { TodoContext } from \"../context/TodoContextProvider\";\r\nimport { firebaseApi } from \"../services/firebaseApi\"\r\n\r\nexport const TodoInput = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const { dispatch } = useContext(TodoContext);\r\n\r\n  const handleAddClick = () => {\r\n    const id = uuidv4();\r\n    firebaseApi.addTodo(id, inputValue);\r\n    dispatch(addTodo(id, inputValue));\r\n    setInputValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <Input\r\n        value={inputValue}\r\n        onChange={({ target: { value } }) => setInputValue(value)}\r\n        placeholder=\"Add a TODO\"\r\n        size=\"large\"\r\n        className=\"todo-input__input\"\r\n        data-cy=\"todo-input__input\"\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        onClick={handleAddClick}\r\n        className=\"todo-input__button\"\r\n        data-cy=\"todo-input__button\"\r\n      >\r\n        Add\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Input, Button } from \"antd\";\r\nimport { setTodos, updateTodo, deleteTodo } from \"../context/todo.actions\";\r\nimport { TodoContext } from \"../context/TodoContextProvider\";\r\nimport { firebaseApi } from \"../services/firebaseApi\"\r\n\r\nconst TodoTask = (props) => {\r\n  const [updatedValue, setUpdatedValue] = useState(props.description);\r\n  const [isUpdating, setUpdating] = useState(false);\r\n\r\n  const onUpdate = () => {\r\n    if (isUpdating) {\r\n      props.update(props.id, updatedValue);\r\n    }\r\n\r\n    setUpdating(!isUpdating);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-task\">\r\n      {!isUpdating && (\r\n        <div className=\"todo-task__name\" data-cy=\"todo-task__name\">\r\n          {props.description}\r\n        </div>\r\n      )}\r\n      {isUpdating && (\r\n        <Input\r\n          value={updatedValue}\r\n          onChange={({ target: { value } }) => setUpdatedValue(value)}\r\n          placeholder=\"Update a TODO\"\r\n          size=\"large\"\r\n          className=\"todo-task__input\"\r\n          data-cy=\"todo-task__input\"\r\n        />\r\n      )}\r\n\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        className=\"todo-task__button\"\r\n        data-cy=\"todo-task__button-update\"\r\n        onClick={() => onUpdate()}\r\n      >\r\n        Update\r\n      </Button>\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        className=\"todo-task__button\"\r\n        data-cy=\"todo-task__button-delete\"\r\n        onClick={() => props.delete(props.id)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TodoList = () => {\r\n  \r\n  const { dispatch, state } = useContext(TodoContext);\r\n\r\n   useEffect(() => {\r\n     const fetchTodos = async () => {\r\n       const todos = await firebaseApi.fetchTodos();\r\n       dispatch(setTodos(todos));\r\n     }\r\n\r\n     fetchTodos();\r\n   }, [dispatch]);\r\n\r\n  const handleDeleteTodo = (id) => {\r\n    // TODO: fill in\r\n    firebaseApi.deleteTodo(id);\r\n    dispatch(deleteTodo(id));\r\n  };\r\n\r\n  const handleUpdateTodo = (id, description) => {\r\n    firebaseApi.updateTodo(id,description);\r\n    dispatch(updateTodo(id, description));\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-list\" data-cy=\"todo-list\">\r\n      {Object.entries(state.todos).map(([id, todo]) => (\r\n        <TodoTask\r\n          key={id}\r\n          description={todo.description}\r\n          delete={handleDeleteTodo}\r\n          update={handleUpdateTodo}\r\n          id={id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoContextProvider } from \"./context/TodoContextProvider\";\r\nimport { Header } from \"./components/Header\";\r\nimport { TodoInput } from \"./components/TodoInput\";\r\nimport { TodoList } from \"./components/TodoList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <TodoContextProvider>\r\n        <TodoInput />\r\n        <TodoList />\r\n      </TodoContextProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './config/firebaseConfig';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}